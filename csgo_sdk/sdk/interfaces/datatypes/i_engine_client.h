#pragma once

#include "../../datatypes/datatypes.h"

class c_net_channel_info;

struct player_info_t;

class i_engine_client {
public:
	virtual int get_intersecting_surfaces( const void* model, const vec3_t& center, const float radius, const bool only_visible_surfaces, void* infos, const int max_infos ) = 0;
	virtual vec3_t get_light_for_point( const vec3_t& pos, bool clamp ) = 0;
	virtual void* trace_line_material_and_lighting( const vec3_t& start, const vec3_t& end, vec3_t& diffuse_light_color, vec3_t& base_color ) = 0;
	virtual const char* parse_file( const char* data, char* token, int max_len ) = 0;
	virtual bool copy_file( const char* source, const char* destination ) = 0;
	virtual void get_screen_size( int& width, int& height ) = 0;
	virtual void server_cmd( const char* cmd_string, bool reliable = true ) = 0;
	virtual void client_cmd( const char* szCmdString ) = 0;
	virtual bool get_player_info( int entity_number, player_info_t* info ) = 0;
	virtual int get_player_for_user_id( int id ) = 0;
	virtual void* get_text_message( const char* name ) = 0;
	virtual bool con_is_visible( void ) = 0;
	virtual int get_local_player( void ) = 0;
	virtual const void* load_model( const char* name, bool prop = false ) = 0;
	virtual float get_last_time_stamp( void ) = 0;
	virtual void* get_sentence( void* audio_source ) = 0;
	virtual float get_sentence_length( void* audio_source ) = 0;
	virtual bool is_streaming( void* audio_source ) const = 0;
	virtual void get_view_angles( qangle_t* angles ) = 0;
	virtual void set_view_angles( qangle_t* angles ) = 0;
	virtual int get_max_clients( void ) = 0;
	virtual const char* key_lookup_binding( const char* binding ) = 0;
	virtual const char* key_binding_for_key( int& code ) = 0;
	virtual void key_set_binding( int, char const* ) = 0;
	virtual void start_key_trap_mode( void ) = 0;
	virtual bool check_done_key_trapping( int& code ) = 0;
	virtual bool is_in_game( void ) = 0;
	virtual bool is_connected( void ) = 0;
	virtual bool is_drawing_loading_image( void ) = 0;
	virtual void hide_loading_plaque( void ) = 0;
	virtual void con_np_printf( int pos, const char* fmt, ... ) = 0;
	virtual void con_xp_printf( const struct con_nprint_s* info, const char* fmt, ... ) = 0;
	virtual int is_box_visible( const vec3_t& mins, const vec3_t& maxs ) = 0;
	virtual int is_box_in_view_cluster( const vec3_t& mins, const vec3_t& maxs ) = 0;
	virtual bool cull_box( const vec3_t& mins, const vec3_t& maxs ) = 0;
	virtual void sound_extra_update( void ) = 0;
	virtual const char* get_game_directory( void ) = 0;
	virtual const v_matrix& world_to_space_matrix( ) = 0;
	virtual const v_matrix& world_to_view_matrix( ) = 0;
	virtual int game_lump_version( int lump_id ) const = 0;
	virtual int game_lump_size( int lump_id ) const = 0;
	virtual bool load_game_lump( int lump_id, void* buffer, int size ) = 0;
	virtual int lvl_leaf_count( ) const = 0;
	virtual void* get_bsp_tree_query( ) = 0;
	virtual void linear_to_gamma( float* linear, float* gamma ) = 0;
	virtual float light_style_value( int style ) = 0;
	virtual void compute_dynamic_lingthing( const vec3_t& pt, const vec3_t* normal, vec3_t& color ) = 0;
	virtual void get_ambeint_lingthing_color( vec3_t& color ) = 0;
	virtual int get_dx_support_lvl( ) = 0;
	virtual bool supports_hdr( ) = 0;
	virtual void mat_stub( void* pMatSys ) = 0;
	virtual void get_chapter_name( char* buffer, int max_length ) = 0;
	virtual char const* get_lvl_name( void ) = 0;
	virtual char const* get_lvl_name_short( void ) = 0;
	virtual char const* get_map_group_name( void ) = 0;
	virtual struct IVoiceTweak_s* get_voice_tweak_api( void ) = 0;
	virtual void set_voice_caster_id( unsigned int someint ) = 0;
	virtual void engine_stats_begin_frame( void ) = 0;
	virtual void engine_stats_end_frame( void ) = 0;
	virtual void fire_events( ) = 0;
	virtual int get_leaves_lvl( unsigned short* leaves, int i_leaves ) = 0;
	virtual bool does_box_touch_area_frustum( const vec3_t& mins, const vec3_t& maxs, int area ) = 0;
	virtual int get_frustum_list( void* list, int list_max ) = 0;
	virtual bool should_use_area_frustum( int i ) = 0;
	virtual void set_audio_state( const void* state ) = 0;
	virtual int sentence_group_pick( int group_index, char* name, int buffer ) = 0;
	virtual int sentence_group_pick_sequential( int group_index, char* name, int buffer, int sentence_index, int reset ) = 0;
	virtual int sentence_index_from_name( const char* name ) = 0;
	virtual const char* sentence_name_from_index( int sentence_index ) = 0;
	virtual int sentence_group_index_from_name( const char* group_name ) = 0;
	virtual const char* sentence_group_name_from_index( int group_index ) = 0;
	virtual float sentence_length( int sentence_index ) = 0;
	virtual void compute_lighting( const vec3_t& pt, const vec3_t* normal, bool clamp, vec3_t& color, vec3_t* box_colors = 0 ) = 0;
	virtual void activate_occluder( int occluder_index, bool active ) = 0;
	virtual bool is_occluded( const vec3_t& abs_mins, const vec3_t& abs_maxs ) = 0;
	virtual int get_occlusion_view_id( void ) = 0;
	virtual void* save_alloc_memory( size_t num, size_t size ) = 0;
	virtual void save_free_memory( void* save_memory ) = 0;
	virtual c_net_channel_info*	get_net_channel_info( void ) = 0;
	virtual void debug_draw_phys_collide( const void* collide, void* material, const matrix3x4_t& transform, const uint8_t* color ) = 0;
	virtual void check_point( const char* name ) = 0;
	virtual void draw_portals( ) = 0;
	virtual bool is_playing_demo( void ) = 0;
	virtual bool is_recording_demo( void ) = 0;
	virtual bool is_playing_time_demo( void ) = 0;
	virtual int get_demo_recording_tick( void ) = 0;
	virtual int get_demo_playback_tick( void ) = 0;
	virtual int get_demo_playback_start_tick( void ) = 0;
	virtual float get_demo_playback_time_scale( void ) = 0;
	virtual int get_demo_playback_total_ticks( void ) = 0;
	virtual bool is_paused( void ) = 0;
	virtual float get_time_scale( void ) const = 0;
	virtual bool is_taking_screenshot( void ) = 0;
	virtual bool is_hltv( void ) = 0;
	virtual bool is_lvl_main_menu_background( void ) = 0;
	virtual void get_main_menu_background_name( char* dest, int destlen ) = 0;
	virtual void set_occlusion_parameters( const int& params ) = 0;
	virtual void get_language( char* dest, int destlen ) = 0;
	virtual int is_skybox_visible_from_point( const vec3_t& vecPoint ) = 0;
	virtual const char* get_map_entites_string( ) = 0;
	virtual bool is_in_edit_mode( void ) = 0;
	virtual float get_aspect_ratio( int view_port_width, int view_port_height ) = 0;
	virtual bool removed_steam_refresh_login( const char* password, bool secure ) = 0;
	virtual bool removed_steam_process_call( bool& finished ) = 0;
	virtual unsigned int get_engine_build_number( ) = 0;
	virtual const char* get_product_version_string( ) = 0;
	virtual void grab_pre_color_corrected_frame( int x, int y, int width, int height ) = 0;
	virtual bool is_hammer_running( ) const = 0;
	virtual void execute_client_cmd( const char* szCmdString ) = 0;
	virtual bool map_has_hdr_lighting( void ) = 0;
	virtual bool map_has_light_map_alpha_data( void ) = 0;
	virtual int get_app_id( ) = 0;
	virtual vec3_t get_light_for_point_fast( const vec3_t& pos, bool clamp ) = 0;
	virtual void client_cmd_unrestricted( char const*, int, bool ) = 0;
	virtual void client_cmd_unrestricted( const char* cmd_string ) = 0;
	virtual void set_restrict_server_commands( bool restrict ) = 0;
	virtual void set_restrict_client_commands( bool restrict ) = 0;
	virtual void set_overlay_bind_proxy( int overlay_id, void* bind_proxy ) = 0;
	virtual bool copy_frame_buffer_to_material( const char* material_name ) = 0;
	virtual void read_configuration( const int controller, const bool read_default ) = 0;
	virtual void set_achievement_mgr( void* achievement_mgr ) = 0;
	virtual void* get_achievement_mgr( ) = 0;
	virtual bool map_load_failed( void ) = 0;
	virtual void set_map_load_failed( bool state ) = 0;
	virtual bool is_low_violence( ) = 0;
	virtual const char* get_most_recent_save_game( void ) = 0;
	virtual void set_most_recent_save_game( const char* file_name ) = 0;
	virtual void start_xbox_exiting_process( ) = 0;
	virtual bool is_save_in_progress( ) = 0;
	virtual bool is_auto_save_dangerous_in_progress( void ) = 0;
	virtual unsigned int on_storage_device_attached( int controller ) = 0;
	virtual void on_storage_device_detached( int controller ) = 0;
	virtual const char* get_save_dir_name( void ) = 0;
	virtual void write_screenshot( const char* file_name ) = 0;
	virtual void reset_demo_interpolation( void ) = 0;
	virtual int get_active_split_screen_player_slot( ) = 0;
	virtual int set_active_split_screen_player_slot( int slot ) = 0;
	virtual bool set_local_player_is_resolvable( char const* context, int line, bool resolvable ) = 0;
	virtual bool local_player_is_resolvable( ) = 0;
	virtual int get_split_screen_player( int slot ) = 0;
	virtual bool is_split_screen_active( ) = 0;
	virtual bool is_valid_screen_split_slot( int slot ) = 0;
	virtual int first_valid_split_screen_slot( ) = 0;
	virtual int next_valid_split_screen_slot( int previous_slot ) = 0;
	virtual void* get_single_player_shared_memory_space( const char* name, int entity_number = ( 1 << 11 ) ) = 0;
	virtual void compute_ligthing_cube( const vec3_t& pt, bool clamp, vec3_t* box_colors ) = 0;
	virtual void register_demo_custom_data_callback( const char* callback_save_id, uint32_t callback ) = 0;
	virtual void record_demo_custom_data( uint32_t callback, const void* data, size_t data_length ) = 0;
	virtual void set_pitch_scale( float pitch_scale ) = 0;
	virtual float get_pitch_scale( void ) = 0;
	virtual bool load_fil_mmaker( ) = 0;
	virtual void unload_fil_mmaker( ) = 0;
	virtual void set_leaf_flags( int leaf_index, int flags_bits ) = 0;
	virtual void recalculate_bsp_leaf_flags( void ) = 0;
	virtual bool dsp_get_current_das_room_new( void ) = 0;
	virtual bool dsp_get_current_das_room_changed( void ) = 0;
	virtual bool dsp_get_current_das_room_sky_above( void ) = 0;
	virtual float dsp_get_current_das_room_sky_precent( void ) = 0;
	virtual void set_mix_group_of_current_mixer( const char* group_name, const char* params, float value, int set_mixer_type ) = 0;
	virtual int get_mix_layer_index( const char* mix_layer_name ) = 0;
	virtual void set_mix_layer_lvl( int index, float lvl ) = 0;
	virtual int get_max_group_index( char const* group_name ) = 0;
	virtual void set_mix_layer_trigger_factor( int i1, int i2, float fl ) = 0;
	virtual void set_mix_layer_trigger_factor( char const* char1, char const* char2, float fl ) = 0;
	virtual bool is_creating_relist( ) = 0;
	virtual bool is_creating_xbox_relist( ) = 0;
	virtual void set_time_scale( float time_scale ) = 0;
	virtual void set_game_stats_data( void* game_stats_data ) = 0;
	virtual void* get_game_stats_data( ) = 0;
	virtual void get_mouse_delta( int& dx, int& dy, bool b ) = 0;
	virtual const char* key_lookup_binding_ex( const char* binding, int user_id = -1, int start_count = 0, int allow_joystick = -1 ) = 0;
	virtual int key_code_for_binding( char const*, int, int, int ) = 0;
	virtual void update_da_and_lights( void ) = 0;
	virtual int get_bug_submission_count( ) const = 0;
	virtual void clear_bug_submission_count( ) = 0;
	virtual bool does_lvl_contain_water( ) const = 0;
	virtual float get_server_simulation_frame_time( ) const = 0;
	virtual void solid_move( class c_client_entity* solid_entity, class c_collideable* solid_collideable, const vec3_t* previous_abs_origin, bool accurate_bbox_triggered_checks ) = 0;
	virtual void trigger_moved( class c_client_entity* trigger_entity, bool accurate_bbox_triggered_checks ) = 0;
	virtual void compute_leaves_connected( const vec3_t& origin, int count, const int* leaf_indices, bool* is_connected ) = 0;
	virtual bool is_in_commentary_mode( void ) = 0;
	virtual void set_blur_fade( float amount ) = 0;
	virtual bool is_transitioning_to_load( ) = 0;
	virtual void search_paths_changed_after_install( ) = 0;
	virtual void configure_system_lvl( int cpu_lvl, int gpu_lvl ) = 0;
	virtual void set_connection_password( char const* current_password ) = 0;
	virtual void* get_steam_api_context( ) = 0;
	virtual void submit_start_record( char const* map_name, unsigned int blob_version, unsigned int blob_size, const void* blob ) = 0;
	virtual void server_cmd_key_values( void* key_values ) = 0;
	virtual void sphere_paint_surface( const void* model, const vec3_t& location, unsigned char chr, float fl1, float fl2 ) = 0;
	virtual bool has_paint_map( void ) = 0;
	virtual void enable_paint_map_render( ) = 0;
	virtual void sphere_trace_paint_surface( const void* model, const vec3_t& position, const vec3_t& vec2, float radius, int& util_vec ) = 0;
	virtual void remove_all_paint( ) = 0;
	virtual void paint_all_surfaces( unsigned char uchr ) = 0;
	virtual void remove_paint( const void* model ) = 0;
	virtual bool is_active_app( ) = 0;
	virtual bool is_client_local_active_to_server( ) = 0;
	virtual void tick_progress_bar( ) = 0;
	virtual uint32_t get_input_context( int id ) = 0;
	virtual void get_startup_image( char* file_name, int size ) = 0;
	virtual bool is_using_local_network_backdoor( void ) = 0;
	virtual void save_game( const char*, bool, char*, int, char*, int ) = 0;
	virtual void get_generic_memory_stats(void** ) = 0;
	virtual bool game_has_shutdown_and_flushed_memory( void ) = 0;
	virtual int get_last_acknowledged_command( void ) = 0;
	virtual void finish_container_writes( int i ) = 0;
	virtual void finish_sync_save( void ) = 0;
	virtual int get_server_tick( void ) = 0;
	virtual const char* get_mod_directory( void ) = 0;
	virtual bool audio_language_changed( void ) = 0;
	virtual bool is_auto_save_in_progress( void ) = 0;
	virtual void strat_loading_screen_for_command( const char* command ) = 0;
	virtual void strat_loading_screen_for_key_values( void* values ) = 0;
	virtual void sos_set_opvar_float( const char*, float ) = 0;
	virtual void sos_get_opvar_float( const char*, float& ) = 0;
	virtual bool is_subscribed_map( const char*, bool ) = 0;
	virtual bool is_featured_map( const char*, bool ) = 0;
	virtual void get_demo_playback_parameters( void ) = 0;
	virtual int get_client_version( void ) = 0;
	virtual bool is_demo_skipping( void ) = 0;
	virtual void set_demo_important_event_data( const void* values ) = 0;
	virtual void clear_events( void ) = 0;
	virtual int get_safe_zone( void ) = 0;
	virtual bool is_voice_recording( void ) = 0;
	virtual void force_voice_record_on( void ) = 0;
	virtual bool is_replay( void ) = 0;
};